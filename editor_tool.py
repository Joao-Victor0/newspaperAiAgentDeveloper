from langchain.tools import BaseTool
from langchain_core.messages import HumanMessage
from langchain_groq import ChatGroq
from dotenv import load_dotenv, find_dotenv

_ = load_dotenv(find_dotenv())

class EditorTool(BaseTool):
    name: str = "editor_tool"
    description: str = """
        Esta ferramenta constr√≥i mat√©rias jornal√≠sticas com base na an√°lise de dados feita por um Agente de IA.  
        - A entrada √© um texto contendo a an√°lise dos dados.  
        - A sa√≠da deve conter:  
          - **T√≠tulo**  
          - **Subt√≠tulo**  
          - **Texto principal**  
        
        O conte√∫do deve manter a imparcialidade e seguir boas pr√°ticas jornal√≠sticas.
    """

    def __init__(self):
        super().__init__()


    def _run(self, analyzed_data: str) -> str:
        # descrevendo o que o modelo deve fazer
        instructions = f"""
            Com base no seguinte texto analisado:  
            {analyzed_data}  
            
            Crie uma mat√©ria jornal√≠stica para seguindo estas diretrizes:  
            - **T√≠tulo**: Resuma o tema da mat√©ria de forma objetiva e chamativa.  
            - **Subt√≠tulo**: Explique brevemente o contexto do t√≠tulo, preparando o leitor para o texto.  
            - **Texto principal**: Desenvolva o conte√∫do de forma clara, concisa e imparcial, destacando os pontos mais relevantes da an√°lise, de forma resumida.  
            
            üîπ **Observa√ß√µes**:  
            - Use um tom formal e profissional.  
            - O texto deve ser direto e informativo, sem excessos.  
            - Evite opini√µes ou especula√ß√µes; baseie-se apenas nos dados fornecidos.  
            - Estruture o conte√∫do de forma fluida para facilitar a leitura.
            
            Traduza o texto analisado para portugu√™s brasileiro no final.
        """

        # incluindo o modelo
        llm = ChatGroq(model="gemma2-9b-it")
        message = [HumanMessage(content=instructions)]

        response = llm.invoke(message)
        return response.content


    async def _arun(self, text: str) -> str:
        raise NotImplementedError("Execu√ß√£o ass√≠ncrona n√£o suportada.")

